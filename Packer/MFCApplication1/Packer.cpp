#include "stdafx.h"
#include "Packer.h"

//微软压缩库
#include <compressapi.h>
#pragma comment(lib, "Cabinet.lib")

CPacker::CPacker()
{
}


CPacker::~CPacker()
{
    //if (lpSrcPeView != NULL)
    //{
    //    //关闭映射空间
    //    CloseHandle(lpSrcPeView);
    //}
    if (hSrcPeMappingFile != NULL)
    {
        //关闭文件映射
        CloseHandle(hSrcPeMappingFile);
    }
    if (hSrcPeFile != NULL)
    {
        //关闭打开的源文件
        CloseHandle(hSrcPeFile);
    }

    if (NewPeSectionTable != NULL)
    {
        delete NewPeSectionTable;
    }
    if (CompressDataBuff != NULL)
    {
        free(CompressDataBuff);
    }
    if (lpShellCode != NULL)
    {
        delete lpShellCode;
    }
    if (AlignCompressDataBuff != NULL)
    {
        delete AlignCompressDataBuff;
    }
    if (AlignlpShellCode != NULL)
    {
        delete AlignlpShellCode;
    }
    if (NewPeHead != NULL)
    {
        delete NewPeHead;
    }
}

BOOL CPacker::Pack(char * SrcPePath, char * DstPePath)
{
    BOOL iRet = 0;
    //1. 解析PE文件
    iRet = ParsingPe(SrcPePath);
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:ParsingPe失败", NULL, MB_OK);
        return 0;
    }
    //2. 压缩数据
    iRet = CompressedData();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:CompressedData失败", NULL, MB_OK);
        return 0;
    }    
    //3. 解压缩代码
    iRet = GetShellCode();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:GetShellCode失败", NULL, MB_OK);
        return 0;
    }

    //4. 生成新PE
    //1)  构造压缩数据节
    iRet = MakeCompressData();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:MakeCompressData失败", NULL, MB_OK);
        return 0;
    }

    //2） 构造解压缩代码节
    iRet = MakeShellCodeSectionData();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:MakeShellCodeSectionData失败", NULL, MB_OK);
        return 0;
    }

    //3） 构造节表
    iRet = MakeSectionTable();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:MakeSectionTable失败", NULL, MB_OK);
        return 0;
    }

    //4） 构造新PE头
    iRet = MakePeHead();
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:MakePeHead失败", NULL, MB_OK);
        return 0;
    }

    //5)  写入新的PE文件
    iRet = WriteNewPeFile(DstPePath);
    if (iRet == NULL)
    {
        ::MessageBox(NULL, "Error:WriteNewPeFile失败", NULL, MB_OK);
        return 0;
    }
    return 1;
}

//解析PE文件
BOOL CPacker::ParsingPe(char * SrcPePath)
{
    //打开文件
    hSrcPeFile = ::CreateFile(SrcPePath, GENERIC_ALL, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hSrcPeFile == NULL)
    {
        ::MessageBox(NULL, "Error:CreateFile", NULL, MB_OK);
        goto ERROR_ERROR;
    }

    //创建文件映射
    hSrcPeMappingFile = CreateFileMapping(hSrcPeFile, NULL, PAGE_READWRITE, 0, 0, NULL);
    if (hSrcPeMappingFile == NULL)
    {
        ::MessageBox(NULL, "Error:CreateFileMapping", NULL, MB_OK);
        goto ERROR_ERROR;
    }

    //映射
    lpSrcPeView = (LPBYTE)MapViewOfFile(hSrcPeMappingFile, FILE_MAP_WRITE, 0, 0, 0);
    if (lpSrcPeView == NULL)
    {
        ::MessageBox(NULL, "Error:MapViewOfFile", NULL, MB_OK);
        goto ERROR_ERROR;
    }

    //获取源PE的三大头部，用于后续索引其他字段使用
    SrcDosHead = (PIMAGE_DOS_HEADER)lpSrcPeView;
    //检查DOS头
    if (*(short *)SrcDosHead != 0x5a4d)
    {
        ::MessageBox(NULL, "Error:非法PE文件，程序退出", NULL, MB_OK);
        goto ERROR_ERROR;
    }
    //获取Nt头，用于后续索引其他字段使用
    SrcNtHead = (PIMAGE_NT_HEADERS)((LPBYTE)SrcDosHead + SrcDosHead->e_lfanew);
    //检查Nt头
    if (*(short *)SrcNtHead != 0x4550)
    {
        ::MessageBox(NULL, "Error:非PE文件，程序退出", NULL, MB_OK);
        goto ERROR_ERROR;
    }
    //获取第一个节表
    SrcSecHead = (PIMAGE_SECTION_HEADER)((LPBYTE)&SrcNtHead->OptionalHeader + SrcNtHead->FileHeader.SizeOfOptionalHeader);

    return 1;

ERROR_ERROR:
    ErrorMessage();
    return 0;
}

//压缩数据,使用微软的压缩函数，如果后期想改加密，修改这个接口函数即可
BOOL CPacker::CompressedData()
{
    COMPRESSOR_HANDLE hCompressor;
    //  Create an XpressHuff compressor.
    BOOL bSuccess = CreateCompressor(
        COMPRESS_ALGORITHM_XPRESS_HUFF, //  Compression Algorithm
        NULL,                           //  Optional allocation routine
        &hCompressor);                   //  Handle

    if (!bSuccess)
    {
        return false;
    }

    //  查询压缩后数据的大小
    DWORD dwFileSize = GetFileSize(hSrcPeFile, NULL);
    SIZE_T nCompressedBufferSize;
    bSuccess = Compress(
        hCompressor,                 //  Compressor Handle
        lpSrcPeView,                 //  Input buffer, Uncompressed data
        dwFileSize,                  //  Uncompressed data size
        NULL,                        //  Compressed Buffer
        0,                           //  Compressed Buffer size
        &nCompressedBufferSize);     //  Compressed Data size
                                     //  Allocate memory for compressed buffer.
    if (!bSuccess)
    {
        DWORD ErrorCode = GetLastError();

        if (ErrorCode != ERROR_INSUFFICIENT_BUFFER)
        {
            return false;
        }

        //查询压缩后的大小，申请等大的空间
        CompressDataBuff = (PBYTE)malloc(nCompressedBufferSize);
        if (CompressDataBuff == NULL)
        {
            ::MessageBox(NULL, "Error:非PE文件，程序退出", NULL, MB_OK);
            return false;
        }
    }

    // 压缩数据，整个PE连头一起压缩
    SIZE_T nCompressedDataSize;
    bSuccess = Compress(
        hCompressor,             //  Compressor Handle
        lpSrcPeView,            //  Input buffer, Uncompressed data
        dwFileSize,				//  Uncompressed data size
        CompressDataBuff,       //  Compressed Buffer
        nCompressedBufferSize,   //  Compressed Buffer size
        &nCompressedDataSize);   //  Compressed Data size

    if (!bSuccess)
    {
        ::MessageBox(NULL, "Error:压缩数据时失败", NULL, MB_OK);
        return false;
    }
    //设置压缩后的数据大小
    CompressDataBuffSize = nCompressedDataSize;
    return true;
}

BOOL CPacker::GetShellCode()
{
    //Shell对应的2进制码
    UCHAR ShellCode[3584] = {
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x28, 0x8D, 0x4D, 0xD8, 0xE8, 0x72, 0x00, 0x00, 0x00, 0x8D, 0x45,
        0xD8, 0x50, 0xE8, 0xA9, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x04, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00,
        0x00, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x8D,
        0x4D, 0xFC, 0x51, 0x8D, 0x55, 0xF8, 0x52, 0x8D, 0x45, 0xF4, 0x50, 0xE8, 0x90, 0x00, 0x00, 0x00,
        0x83, 0xC4, 0x0C, 0xC7, 0x45, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x4D, 0xF0, 0x51, 0x8B, 0x55,
        0xFC, 0x52, 0x8B, 0x45, 0xF8, 0x50, 0x8B, 0x4D, 0xF4, 0x51, 0x8D, 0x55, 0xD8, 0x52, 0xE8, 0xED,
        0x00, 0x00, 0x00, 0x83, 0xC4, 0x14, 0x8B, 0x45, 0xF0, 0x50, 0x8D, 0x4D, 0xD8, 0x51, 0xE8, 0x5D,
        0x09, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x33, 0xC0, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x51, 0x89, 0x4D, 0xFC, 0x8B, 0x45, 0xFC, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x8B, 0x4D, 0xFC, 0xC7, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x55, 0xFC, 0xC7, 0x42, 0x08,
        0x00, 0x00, 0x00, 0x00, 0x8B, 0x45, 0xFC, 0xC7, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x4D,
        0xFC, 0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x55, 0xFC, 0xC7, 0x42, 0x14, 0x00, 0x00,
        0x00, 0x00, 0x8B, 0x45, 0xFC, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0x6A, 0x00, 0xE8, 0x33, 0x06, 0x00, 0x00, 0x83, 0xC4, 0x04,
        0x89, 0x45, 0xFC, 0x8B, 0x45, 0xFC, 0x89, 0x45, 0xF0, 0x8B, 0x4D, 0xF0, 0x8B, 0x55, 0xFC, 0x03,
        0x51, 0x3C, 0x89, 0x55, 0xF4, 0x8B, 0x45, 0xF4, 0x0F, 0xB7, 0x48, 0x14, 0x8B, 0x55, 0xF4, 0x8D,
        0x44, 0x0A, 0x18, 0x89, 0x45, 0xF8, 0xB9, 0x28, 0x00, 0x00, 0x00, 0xD1, 0xE1, 0x8B, 0x55, 0xF8,
        0x8B, 0x45, 0xFC, 0x03, 0x44, 0x0A, 0x0C, 0x8B, 0x4D, 0x08, 0x89, 0x01, 0xBA, 0x28, 0x00, 0x00,
        0x00, 0xD1, 0xE2, 0x8B, 0x45, 0x0C, 0x8B, 0x4D, 0xF8, 0x8B, 0x54, 0x11, 0x18, 0x89, 0x10, 0xB8,
        0x28, 0x00, 0x00, 0x00, 0xD1, 0xE0, 0x8B, 0x4D, 0x10, 0x8B, 0x55, 0xF8, 0x8B, 0x44, 0x02, 0x1C,
        0x89, 0x01, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x0C, 0x8D, 0x45, 0xF8, 0x50, 0x6A, 0x00, 0x6A, 0x04, 0x8B, 0x4D,
        0x08, 0x8B, 0x51, 0x04, 0xFF, 0xD2, 0x89, 0x45, 0xF4, 0x6A, 0x04, 0x68, 0x00, 0x30, 0x00, 0x00,
        0x8B, 0x45, 0x14, 0x50, 0x6A, 0x00, 0x8B, 0x4D, 0x08, 0x8B, 0x51, 0x0C, 0xFF, 0xD2, 0x8B, 0x4D,
        0x18, 0x89, 0x01, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x55, 0xFC, 0x52, 0x8B, 0x45,
        0x14, 0x50, 0x8B, 0x4D, 0x18, 0x8B, 0x11, 0x52, 0x8B, 0x45, 0x10, 0x50, 0x8B, 0x4D, 0x0C, 0x51,
        0x8B, 0x55, 0xF8, 0x52, 0x8B, 0x45, 0x08, 0x8B, 0x48, 0x08, 0xFF, 0xD1, 0x89, 0x45, 0xF4, 0xB8,
        0x01, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x80, 0x00, 0x00, 0x00, 0xC6, 0x45, 0xB4, 0x4C, 0xC6, 0x45, 0xB5,
        0x6F, 0xC6, 0x45, 0xB6, 0x61, 0xC6, 0x45, 0xB7, 0x64, 0xC6, 0x45, 0xB8, 0x4C, 0xC6, 0x45, 0xB9,
        0x69, 0xC6, 0x45, 0xBA, 0x62, 0xC6, 0x45, 0xBB, 0x72, 0xC6, 0x45, 0xBC, 0x61, 0xC6, 0x45, 0xBD,
        0x72, 0xC6, 0x45, 0xBE, 0x79, 0xC6, 0x45, 0xBF, 0x41, 0xC6, 0x45, 0xC0, 0x00, 0xC6, 0x45, 0xC4,
        0x4B, 0xC6, 0x45, 0xC5, 0x65, 0xC6, 0x45, 0xC6, 0x72, 0xC6, 0x45, 0xC7, 0x6E, 0xC6, 0x45, 0xC8,
        0x65, 0xC6, 0x45, 0xC9, 0x6C, 0xC6, 0x45, 0xCA, 0x33, 0xC6, 0x45, 0xCB, 0x32, 0xC6, 0x45, 0xCC,
        0x2E, 0xC6, 0x45, 0xCD, 0x64, 0xC6, 0x45, 0xCE, 0x6C, 0xC6, 0x45, 0xCF, 0x6C, 0xC6, 0x45, 0xD0,
        0x00, 0xC6, 0x45, 0xA4, 0x56, 0xC6, 0x45, 0xA5, 0x69, 0xC6, 0x45, 0xA6, 0x72, 0xC6, 0x45, 0xA7,
        0x74, 0xC6, 0x45, 0xA8, 0x75, 0xC6, 0x45, 0xA9, 0x61, 0xC6, 0x45, 0xAA, 0x6C, 0xC6, 0x45, 0xAB,
        0x41, 0xC6, 0x45, 0xAC, 0x6C, 0xC6, 0x45, 0xAD, 0x6C, 0xC6, 0x45, 0xAE, 0x6F, 0xC6, 0x45, 0xAF,
        0x63, 0xC6, 0x45, 0xB0, 0x00, 0xC6, 0x45, 0x94, 0x56, 0xC6, 0x45, 0x95, 0x69, 0xC6, 0x45, 0x96,
        0x72, 0xC6, 0x45, 0x97, 0x74, 0xC6, 0x45, 0x98, 0x75, 0xC6, 0x45, 0x99, 0x61, 0xC6, 0x45, 0x9A,
        0x6C, 0xC6, 0x45, 0x9B, 0x50, 0xC6, 0x45, 0x9C, 0x72, 0xC6, 0x45, 0x9D, 0x6F, 0xC6, 0x45, 0x9E,
        0x74, 0xC6, 0x45, 0x9F, 0x65, 0xC6, 0x45, 0xA0, 0x63, 0xC6, 0x45, 0xA1, 0x74, 0xC6, 0x45, 0xA2,
        0x00, 0xC6, 0x45, 0xE0, 0x43, 0xC6, 0x45, 0xE1, 0x61, 0xC6, 0x45, 0xE2, 0x62, 0xC6, 0x45, 0xE3,
        0x69, 0xC6, 0x45, 0xE4, 0x6E, 0xC6, 0x45, 0xE5, 0x65, 0xC6, 0x45, 0xE6, 0x74, 0xC6, 0x45, 0xE7,
        0x2E, 0xC6, 0x45, 0xE8, 0x64, 0xC6, 0x45, 0xE9, 0x6C, 0xC6, 0x45, 0xEA, 0x6C, 0xC6, 0x45, 0xEB,
        0x00, 0xC6, 0x45, 0x80, 0x43, 0xC6, 0x45, 0x81, 0x72, 0xC6, 0x45, 0x82, 0x65, 0xC6, 0x45, 0x83,
        0x61, 0xC6, 0x45, 0x84, 0x74, 0xC6, 0x45, 0x85, 0x65, 0xC6, 0x45, 0x86, 0x44, 0xC6, 0x45, 0x87,
        0x65, 0xC6, 0x45, 0x88, 0x63, 0xC6, 0x45, 0x89, 0x6F, 0xC6, 0x45, 0x8A, 0x6D, 0xC6, 0x45, 0x8B,
        0x70, 0xC6, 0x45, 0x8C, 0x72, 0xC6, 0x45, 0x8D, 0x65, 0xC6, 0x45, 0x8E, 0x73, 0xC6, 0x45, 0x8F,
        0x73, 0xC6, 0x45, 0x90, 0x6F, 0xC6, 0x45, 0x91, 0x72, 0xC6, 0x45, 0x92, 0x00, 0xC6, 0x45, 0xEC,
        0x44, 0xC6, 0x45, 0xED, 0x65, 0xC6, 0x45, 0xEE, 0x63, 0xC6, 0x45, 0xEF, 0x6F, 0xC6, 0x45, 0xF0,
        0x6D, 0xC6, 0x45, 0xF1, 0x70, 0xC6, 0x45, 0xF2, 0x72, 0xC6, 0x45, 0xF3, 0x65, 0xC6, 0x45, 0xF4,
        0x73, 0xC6, 0x45, 0xF5, 0x73, 0xC6, 0x45, 0xF6, 0x00, 0xC6, 0x45, 0xD4, 0x45, 0xC6, 0x45, 0xD5,
        0x78, 0xC6, 0x45, 0xD6, 0x69, 0xC6, 0x45, 0xD7, 0x74, 0xC6, 0x45, 0xD8, 0x50, 0xC6, 0x45, 0xD9,
        0x72, 0xC6, 0x45, 0xDA, 0x6F, 0xC6, 0x45, 0xDB, 0x63, 0xC6, 0x45, 0xDC, 0x65, 0xC6, 0x45, 0xDD,
        0x73, 0xC6, 0x45, 0xDE, 0x73, 0xC6, 0x45, 0xDF, 0x00, 0x8D, 0x45, 0xC4, 0x50, 0xE8, 0x8E, 0x03,
        0x00, 0x00, 0x83, 0xC4, 0x04, 0x89, 0x45, 0xFC, 0x8D, 0x4D, 0xB4, 0x51, 0x8B, 0x55, 0xFC, 0x52,
        0xE8, 0x6B, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x8B, 0x4D, 0x08, 0x89, 0x01, 0x8D, 0x55, 0xE0,
        0x52, 0x8B, 0x45, 0x08, 0x8B, 0x08, 0xFF, 0xD1, 0x89, 0x45, 0xF8, 0x8D, 0x55, 0xA4, 0x52, 0x8B,
        0x45, 0xFC, 0x50, 0xE8, 0x48, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x8B, 0x4D, 0x08, 0x89, 0x41,
        0x0C, 0x8D, 0x55, 0x94, 0x52, 0x8B, 0x45, 0xFC, 0x50, 0xE8, 0x32, 0x01, 0x00, 0x00, 0x83, 0xC4,
        0x08, 0x8B, 0x4D, 0x08, 0x89, 0x41, 0x10, 0x8D, 0x55, 0x80, 0x52, 0x8B, 0x45, 0xF8, 0x50, 0xE8,
        0x1C, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x8B, 0x4D, 0x08, 0x89, 0x41, 0x04, 0x8D, 0x55, 0xEC,
        0x52, 0x8B, 0x45, 0xF8, 0x50, 0xE8, 0x06, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x8B, 0x4D, 0x08,
        0x89, 0x41, 0x08, 0x8D, 0x55, 0xD4, 0x52, 0x8B, 0x45, 0xFC, 0x50, 0xE8, 0xF0, 0x00, 0x00, 0x00,
        0x83, 0xC4, 0x08, 0x8B, 0x4D, 0x08, 0x89, 0x41, 0x14, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0x7D, 0x10, 0x00, 0x75, 0x04, 0x33, 0xC0, 0xEB, 0x3D, 0x8B, 0x45, 0x10,
        0x83, 0xE8, 0x01, 0x89, 0x45, 0x10, 0x74, 0x24, 0x8B, 0x4D, 0x08, 0x0F, 0xBE, 0x11, 0x8B, 0x45,
        0x0C, 0x0F, 0xBE, 0x08, 0x3B, 0xD1, 0x75, 0x14, 0x8B, 0x55, 0x08, 0x83, 0xC2, 0x01, 0x89, 0x55,
        0x08, 0x8B, 0x45, 0x0C, 0x83, 0xC0, 0x01, 0x89, 0x45, 0x0C, 0xEB, 0xD1, 0x8B, 0x4D, 0x08, 0x0F,
        0xB6, 0x01, 0x8B, 0x55, 0x0C, 0x0F, 0xB6, 0x0A, 0x2B, 0xC1, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x08, 0x8B, 0x45, 0x08, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0x10, 0x89,
        0x4D, 0xFC, 0x8B, 0x55, 0x10, 0x83, 0xEA, 0x01, 0x89, 0x55, 0x10, 0x83, 0x7D, 0xFC, 0x00, 0x74,
        0x13, 0x8B, 0x45, 0x08, 0x8A, 0x4D, 0x0C, 0x88, 0x08, 0x8B, 0x55, 0x08, 0x83, 0xC2, 0x01, 0x89,
        0x55, 0x08, 0xEB, 0xD8, 0x8B, 0x45, 0xF8, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x08, 0x8B, 0x45, 0x08, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0x10, 0x89,
        0x4D, 0xFC, 0x8B, 0x55, 0x10, 0x83, 0xEA, 0x01, 0x89, 0x55, 0x10, 0x83, 0x7D, 0xFC, 0x00, 0x74,
        0x1E, 0x8B, 0x45, 0x08, 0x8B, 0x4D, 0x0C, 0x8A, 0x11, 0x88, 0x10, 0x8B, 0x45, 0x08, 0x83, 0xC0,
        0x01, 0x89, 0x45, 0x08, 0x8B, 0x4D, 0x0C, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0x0C, 0xEB, 0xCD, 0x8B,
        0x45, 0xF8, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x50, 0x8B, 0x45, 0x08, 0x89, 0x45, 0xC4, 0x8B, 0x4D, 0xC4, 0x8B,
        0x55, 0x08, 0x03, 0x51, 0x3C, 0x89, 0x55, 0xC0, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xC8, 0x00,
        0x8B, 0x55, 0xC0, 0x8B, 0x44, 0x0A, 0x78, 0x03, 0x45, 0x08, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8,
        0x8B, 0x51, 0x10, 0x89, 0x55, 0xBC, 0x8B, 0x45, 0xF8, 0x8B, 0x48, 0x14, 0x89, 0x4D, 0xB8, 0x8B,
        0x55, 0xF8, 0x8B, 0x42, 0x18, 0x89, 0x45, 0xC8, 0x8B, 0x4D, 0xF8, 0x8B, 0x51, 0x1C, 0x89, 0x55,
        0xE8, 0x8B, 0x45, 0xF8, 0x8B, 0x48, 0x20, 0x89, 0x4D, 0xDC, 0x8B, 0x55, 0xF8, 0x8B, 0x42, 0x24,
        0x89, 0x45, 0xD0, 0x8B, 0x4D, 0xE8, 0x03, 0x4D, 0x08, 0x89, 0x4D, 0xE8, 0x8B, 0x55, 0xDC, 0x03,
        0x55, 0x08, 0x89, 0x55, 0xDC, 0x8B, 0x45, 0xD0, 0x03, 0x45, 0x08, 0x89, 0x45, 0xD0, 0xC7, 0x45,
        0xE4, 0x00, 0x00, 0x00, 0x00, 0x81, 0x7D, 0x0C, 0xFF, 0xFF, 0x00, 0x00, 0x77, 0x1D, 0x8B, 0x4D,
        0x0C, 0x2B, 0x4D, 0xBC, 0x89, 0x4D, 0xE4, 0x8B, 0x55, 0xE4, 0x3B, 0x55, 0xB8, 0x76, 0x07, 0x33,
        0xC0, 0xE9, 0x5D, 0x01, 0x00, 0x00, 0xE9, 0x3E, 0x01, 0x00, 0x00, 0xC7, 0x45, 0xD4, 0x00, 0x00,
        0x00, 0x00, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xE0, 0x83, 0xC0,
        0x01, 0x89, 0x45, 0xE0, 0x8B, 0x4D, 0x0C, 0x03, 0x4D, 0xE0, 0x0F, 0xBE, 0x11, 0x85, 0xD2, 0x75,
        0x02, 0xEB, 0x0B, 0x8B, 0x45, 0xD4, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xD4, 0xEB, 0xDD, 0xC7, 0x45,
        0xCC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D,
        0xF4, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0xF4, 0x8B, 0x55, 0xF4, 0x3B, 0x55, 0xC8, 0x0F, 0x83, 0xE6,
        0x00, 0x00, 0x00, 0x83, 0x7D, 0xCC, 0x01, 0x75, 0x05, 0xE9, 0xDB, 0x00, 0x00, 0x00, 0x8B, 0x45,
        0xF4, 0x8B, 0x4D, 0xDC, 0x8D, 0x14, 0x81, 0x89, 0x55, 0xB4, 0x8B, 0x45, 0xB4, 0x8B, 0x08, 0x89,
        0x4D, 0xF0, 0x8B, 0x55, 0xF0, 0x03, 0x55, 0x08, 0x89, 0x55, 0xF0, 0xC7, 0x45, 0xEC, 0x00, 0x00,
        0x00, 0x00, 0xC7, 0x45, 0xD8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xD8, 0x83, 0xC0,
        0x01, 0x89, 0x45, 0xD8, 0x8B, 0x4D, 0xF0, 0x03, 0x4D, 0xD8, 0x0F, 0xBE, 0x11, 0x85, 0xD2, 0x75,
        0x02, 0xEB, 0x0B, 0x8B, 0x45, 0xEC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xEC, 0xEB, 0xDD, 0x8B, 0x4D,
        0xEC, 0x3B, 0x4D, 0xD4, 0x75, 0x69, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B,
        0x55, 0xFC, 0x83, 0xC2, 0x01, 0x89, 0x55, 0xFC, 0x8B, 0x45, 0xFC, 0x3B, 0x45, 0xEC, 0x73, 0x4F,
        0x8B, 0x4D, 0xF0, 0x03, 0x4D, 0xFC, 0x0F, 0xBE, 0x11, 0x8B, 0x45, 0x0C, 0x03, 0x45, 0xFC, 0x0F,
        0xBE, 0x08, 0x3B, 0xD1, 0x74, 0x02, 0xEB, 0x37, 0x8B, 0x55, 0xF0, 0x03, 0x55, 0xFC, 0x0F, 0xBE,
        0x02, 0x8B, 0x4D, 0x0C, 0x03, 0x4D, 0xFC, 0x0F, 0xBE, 0x11, 0x3B, 0xC2, 0x75, 0x1F, 0x8B, 0x45,
        0xEC, 0x83, 0xE8, 0x01, 0x39, 0x45, 0xFC, 0x75, 0x14, 0x8B, 0x4D, 0xF4, 0x8B, 0x55, 0xD0, 0x0F,
        0xB7, 0x04, 0x4A, 0x89, 0x45, 0xE4, 0xC7, 0x45, 0xCC, 0x01, 0x00, 0x00, 0x00, 0xEB, 0xA0, 0x8B,
        0x4D, 0xC8, 0x83, 0xE9, 0x01, 0x39, 0x4D, 0xF4, 0x75, 0x0A, 0x83, 0x7D, 0xCC, 0x00, 0x75, 0x04,
        0x33, 0xC0, 0xEB, 0x1F, 0xE9, 0x05, 0xFF, 0xFF, 0xFF, 0x8B, 0x55, 0xE4, 0x8B, 0x45, 0xE8, 0x8D,
        0x0C, 0x90, 0x89, 0x4D, 0xE8, 0x8B, 0x55, 0xE8, 0x8B, 0x02, 0x03, 0x45, 0x08, 0x89, 0x45, 0xB0,
        0x8B, 0x45, 0xB0, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x44, 0x02, 0x00, 0x00, 0xC7, 0x45, 0xD4, 0x00, 0x00, 0x00, 0x00,
        0x83, 0x7D, 0x08, 0x00, 0x75, 0x14, 0x64, 0xA1, 0x18, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x30, 0x8B,
        0x40, 0x08, 0x89, 0x45, 0xD4, 0xE9, 0x8D, 0x02, 0x00, 0x00, 0xC7, 0x45, 0xC4, 0x00, 0x00, 0x00,
        0x00, 0xC7, 0x45, 0xC8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xD8, 0x00, 0x00, 0x00, 0x00, 0xC7,
        0x45, 0xEC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xCC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xE4,
        0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xE8, 0x00, 0x00,
        0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xE8, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xE8, 0x81, 0x7D, 0xE8,
        0x04, 0x01, 0x00, 0x00, 0x7D, 0x18, 0x8B, 0x4D, 0xE8, 0xC6, 0x84, 0x0D, 0xBC, 0xFD, 0xFF, 0xFF,
        0x00, 0x8B, 0x55, 0xE8, 0xC6, 0x84, 0x15, 0xC0, 0xFE, 0xFF, 0xFF, 0x00, 0xEB, 0xD6, 0xC7, 0x45,
        0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xFC,
        0x8B, 0x4D, 0x08, 0x03, 0x4D, 0xFC, 0x0F, 0xBE, 0x11, 0x39, 0x55, 0xFC, 0x7D, 0x09, 0xC7, 0x45,
        0xD0, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x07, 0xC7, 0x45, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x83, 0x7D,
        0xD0, 0x00, 0x74, 0x4C, 0x8B, 0x45, 0x08, 0x03, 0x45, 0xFC, 0x8B, 0x4D, 0xFC, 0x8A, 0x10, 0x88,
        0x94, 0x0D, 0xBC, 0xFD, 0xFF, 0xFF, 0x8B, 0x45, 0xFC, 0x0F, 0xBE, 0x8C, 0x05, 0xBC, 0xFD, 0xFF,
        0xFF, 0x83, 0xF9, 0x41, 0x7C, 0x28, 0x8B, 0x55, 0xFC, 0x0F, 0xBE, 0x84, 0x15, 0xBC, 0xFD, 0xFF,
        0xFF, 0x83, 0xF8, 0x5A, 0x7F, 0x18, 0x8B, 0x4D, 0xFC, 0x0F, 0xBE, 0x94, 0x0D, 0xBC, 0xFD, 0xFF,
        0xFF, 0x83, 0xC2, 0x20, 0x8B, 0x45, 0xFC, 0x88, 0x94, 0x05, 0xBC, 0xFD, 0xFF, 0xFF, 0xEB, 0x87,
        0x64, 0xA1, 0x18, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x30, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x0C, 0x89,
        0x45, 0xC4, 0x89, 0x45, 0xC8, 0x89, 0x45, 0xEC, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x85, 0xC9, 0x0F,
        0x84, 0x82, 0x01, 0x00, 0x00, 0x8B, 0x55, 0xEC, 0x8B, 0x42, 0x2C, 0x89, 0x45, 0xE4, 0x8B, 0x4D,
        0xE4, 0x81, 0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x89, 0x4D, 0xE4, 0x8B, 0x55, 0xEC, 0x8B, 0x42, 0x30,
        0x89, 0x45, 0xCC, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xF8, 0x83,
        0xC1, 0x01, 0x89, 0x4D, 0xF8, 0x8B, 0x55, 0xF8, 0x3B, 0x55, 0xE4, 0x73, 0x1F, 0x8B, 0x45, 0xF8,
        0xD1, 0xE8, 0x8B, 0x4D, 0xCC, 0x03, 0x4D, 0xF8, 0x8A, 0x11, 0x88, 0x94, 0x05, 0xC0, 0xFE, 0xFF,
        0xFF, 0x8B, 0x45, 0xF8, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xF8, 0xEB, 0xD0, 0xC7, 0x45, 0xF4, 0x00,
        0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xF4, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0xF4, 0x8B, 0x55,
        0xF4, 0x0F, 0xBE, 0x84, 0x15, 0xC0, 0xFE, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0x3A, 0x8B, 0x4D, 0xF4,
        0x0F, 0xBE, 0x94, 0x0D, 0xC0, 0xFE, 0xFF, 0xFF, 0x83, 0xFA, 0x41, 0x7C, 0x28, 0x8B, 0x45, 0xF4,
        0x0F, 0xBE, 0x8C, 0x05, 0xC0, 0xFE, 0xFF, 0xFF, 0x83, 0xF9, 0x5A, 0x7F, 0x18, 0x8B, 0x55, 0xF4,
        0x0F, 0xBE, 0x84, 0x15, 0xC0, 0xFE, 0xFF, 0xFF, 0x83, 0xC0, 0x20, 0x8B, 0x4D, 0xF4, 0x88, 0x84,
        0x0D, 0xC0, 0xFE, 0xFF, 0xFF, 0xEB, 0xAE, 0xC7, 0x45, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09,
        0x8B, 0x55, 0xF0, 0x83, 0xC2, 0x01, 0x89, 0x55, 0xF0, 0x8B, 0x45, 0xF0, 0x0F, 0xBE, 0x8C, 0x05,
        0xC0, 0xFE, 0xFF, 0xFF, 0x85, 0xC9, 0x74, 0x53, 0x8B, 0x55, 0xF0, 0x0F, 0xBE, 0x84, 0x15, 0xBC,
        0xFD, 0xFF, 0xFF, 0x8B, 0x4D, 0xF0, 0x0F, 0xBE, 0x94, 0x0D, 0xC0, 0xFE, 0xFF, 0xFF, 0x3B, 0xC2,
        0x74, 0x09, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x30, 0x8B, 0x45, 0xF0, 0x0F, 0xBE,
        0x8C, 0x05, 0xBC, 0xFD, 0xFF, 0xFF, 0x85, 0xC9, 0x75, 0x18, 0x8B, 0x55, 0xF0, 0x0F, 0xBE, 0x84,
        0x15, 0xC0, 0xFE, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0x09, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00,
        0xEB, 0x09, 0xC7, 0x45, 0xE0, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x95, 0x83, 0x7D, 0xE0, 0x01, 0x75,
        0x0B, 0x8B, 0x4D, 0xEC, 0x8B, 0x51, 0x18, 0x89, 0x55, 0xD4, 0xEB, 0x4B, 0xC7, 0x45, 0xDC, 0x00,
        0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xDC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xDC, 0x8B, 0x4D,
        0xDC, 0x0F, 0xBE, 0x94, 0x0D, 0xC0, 0xFE, 0xFF, 0xFF, 0x85, 0xD2, 0x74, 0x0D, 0x8B, 0x45, 0xDC,
        0xC6, 0x84, 0x05, 0xC0, 0xFE, 0xFF, 0xFF, 0x00, 0xEB, 0xDB, 0x8B, 0x4D, 0xD8, 0x3B, 0x4D, 0xC8,
        0x75, 0x02, 0xEB, 0x13, 0x8B, 0x55, 0xEC, 0x8B, 0x02, 0x89, 0x45, 0xD8, 0x8B, 0x4D, 0xD8, 0x89,
        0x4D, 0xEC, 0xE9, 0x71, 0xFE, 0xFF, 0xFF, 0x8B, 0x45, 0xD4, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x7C, 0x8B, 0x45, 0x0C, 0x89, 0x45, 0xB8, 0x8B, 0x4D, 0xB8, 0x8B,
        0x55, 0x0C, 0x03, 0x51, 0x3C, 0x89, 0x55, 0xC8, 0x8B, 0x45, 0xC8, 0x83, 0xC0, 0x04, 0x89, 0x45,
        0xC4, 0x8B, 0x4D, 0xC8, 0x83, 0xC1, 0x18, 0x89, 0x4D, 0xF4, 0x8B, 0x55, 0xF4, 0x83, 0xC2, 0x60,
        0x89, 0x55, 0x98, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xC1, 0xE0, 0x00, 0x8B, 0x4D, 0xF4, 0x8B, 0x54,
        0x01, 0x60, 0x89, 0x55, 0xF0, 0x8B, 0x45, 0xC4, 0x0F, 0xB7, 0x48, 0x02, 0x89, 0x4D, 0xA4, 0x8B,
        0x55, 0xC4, 0x0F, 0xB7, 0x42, 0x10, 0x89, 0x45, 0xB4, 0x8B, 0x4D, 0xF4, 0x03, 0x4D, 0xB4, 0x89,
        0x4D, 0xEC, 0x8B, 0x55, 0xF4, 0x8B, 0x42, 0x38, 0x89, 0x45, 0xAC, 0x8B, 0x4D, 0xF4, 0x8B, 0x51,
        0x1C, 0x89, 0x55, 0xF8, 0x8B, 0x45, 0xF0, 0x03, 0x45, 0xF8, 0x89, 0x45, 0xF0, 0x8B, 0x4D, 0xF4,
        0x8B, 0x51, 0x10, 0x89, 0x55, 0xCC, 0x8B, 0x45, 0xCC, 0x03, 0x45, 0xF8, 0x89, 0x45, 0xCC, 0x8B,
        0x4D, 0xF4, 0x8B, 0x51, 0x3C, 0x89, 0x55, 0xA8, 0xC7, 0x45, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x8D,
        0x45, 0xB0, 0x50, 0x6A, 0x40, 0x8B, 0x4D, 0xAC, 0x51, 0x8B, 0x55, 0xF8, 0x52, 0x8B, 0x45, 0x08,
        0x8B, 0x48, 0x10, 0xFF, 0xD1, 0x85, 0xC0, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0xB7, 0x01, 0x00, 0x00,
        0x8B, 0x55, 0xA8, 0x52, 0x8B, 0x45, 0x0C, 0x50, 0x8B, 0x4D, 0xF8, 0x51, 0xE8, 0x0F, 0xFA, 0xFF,
        0xFF, 0x83, 0xC4, 0x0C, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x55, 0xE0,
        0x83, 0xC2, 0x01, 0x89, 0x55, 0xE0, 0x8B, 0x45, 0xE0, 0x3B, 0x45, 0xA4, 0x73, 0x46, 0x8B, 0x4D,
        0xEC, 0x8B, 0x51, 0x0C, 0x89, 0x55, 0xDC, 0x8B, 0x45, 0xDC, 0x03, 0x45, 0xF8, 0x89, 0x45, 0xDC,
        0x8B, 0x4D, 0xEC, 0x8B, 0x51, 0x14, 0x89, 0x55, 0x9C, 0x8B, 0x45, 0xEC, 0x8B, 0x48, 0x10, 0x89,
        0x4D, 0xA0, 0x8B, 0x55, 0xA0, 0x52, 0x8B, 0x45, 0x0C, 0x03, 0x45, 0x9C, 0x50, 0x8B, 0x4D, 0xDC,
        0x51, 0xE8, 0xBA, 0xF9, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x55, 0xEC, 0x83, 0xC2, 0x28, 0x89,
        0x55, 0xEC, 0xEB, 0xA9, 0x6A, 0x14, 0x6A, 0x00, 0x8D, 0x45, 0x84, 0x50, 0xE8, 0x5F, 0xF9, 0xFF,
        0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x14, 0x8B, 0x4D, 0xF0, 0x51, 0x8D, 0x55, 0x84, 0x52, 0xE8, 0xFD,
        0xF8, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x0F, 0x84, 0x05, 0x01, 0x00, 0x00, 0x8B, 0x45,
        0xF0, 0x89, 0x45, 0xE8, 0x8B, 0x4D, 0xF0, 0x83, 0xC1, 0x14, 0x89, 0x4D, 0xF0, 0x8B, 0x55, 0xE8,
        0x8B, 0x42, 0x10, 0x89, 0x45, 0xE4, 0x8B, 0x4D, 0xE4, 0x03, 0x4D, 0xF8, 0x89, 0x4D, 0xE4, 0x8B,
        0x55, 0xE4, 0x83, 0x3A, 0x00, 0x75, 0x02, 0xEB, 0xBB, 0x8B, 0x45, 0xE8, 0x8B, 0x08, 0x89, 0x4D,
        0xFC, 0x83, 0x7D, 0xFC, 0x00, 0x75, 0x09, 0x8B, 0x55, 0xE8, 0x8B, 0x42, 0x10, 0x89, 0x45, 0xFC,
        0x8B, 0x4D, 0xFC, 0x03, 0x4D, 0xF8, 0x89, 0x4D, 0xFC, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0xC5, 0x00,
        0x00, 0x00, 0x8B, 0x55, 0xE8, 0x8B, 0x42, 0x0C, 0x89, 0x45, 0xD8, 0x8B, 0x4D, 0xD8, 0x03, 0x4D,
        0xF8, 0x89, 0x4D, 0xD8, 0x8B, 0x55, 0xD8, 0x52, 0x8B, 0x45, 0x08, 0x8B, 0x08, 0xFF, 0xD1, 0x89,
        0x45, 0xC0, 0x83, 0x7D, 0xC0, 0x00, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0x98, 0x00, 0x00, 0x00, 0xC7,
        0x45, 0xD0, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x55, 0xFC,
        0x83, 0x3A, 0x00, 0x74, 0x69, 0x8B, 0x45, 0xFC, 0x8B, 0x08, 0x81, 0xE1, 0x00, 0x00, 0x00, 0x80,
        0x75, 0x11, 0x8B, 0x55, 0xFC, 0x8B, 0x02, 0x8B, 0x4D, 0xF8, 0x8D, 0x54, 0x08, 0x02, 0x89, 0x55,
        0xD4, 0xEB, 0x0E, 0x8B, 0x45, 0xFC, 0x8B, 0x08, 0x81, 0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x89, 0x4D,
        0xD4, 0x8B, 0x55, 0xD4, 0x52, 0x8B, 0x45, 0xC0, 0x50, 0xE8, 0x02, 0xF9, 0xFF, 0xFF, 0x83, 0xC4,
        0x08, 0x89, 0x45, 0xBC, 0x83, 0x7D, 0xBC, 0x00, 0x75, 0x04, 0x33, 0xC0, 0xEB, 0x39, 0x8B, 0x4D,
        0xD0, 0x8B, 0x55, 0xE4, 0x8B, 0x45, 0xBC, 0x89, 0x04, 0x8A, 0x8B, 0x4D, 0xD0, 0x83, 0xC1, 0x01,
        0x89, 0x4D, 0xD0, 0x8B, 0x55, 0xFC, 0x83, 0xC2, 0x04, 0x89, 0x55, 0xFC, 0xEB, 0x8F, 0xE9, 0xE1,
        0xFE, 0xFF, 0xFF, 0x8B, 0x45, 0x08, 0x50, 0xE8, 0x14, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x04, 0xFF,
        0x65, 0xCC, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x08, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xF8,
        0x00, 0x00, 0x00, 0x00, 0x52, 0x50, 0x64, 0xA1, 0x18, 0x00, 0x00, 0x00, 0x3E, 0x8B, 0x40, 0x30,
        0x3E, 0x0F, 0xB6, 0x50, 0x68, 0x3E, 0x0F, 0xB6, 0x40, 0x02, 0x89, 0x55, 0xF8, 0x89, 0x45, 0xFC,
        0x58, 0x5A, 0x83, 0x7D, 0xFC, 0x00, 0x75, 0x06, 0x83, 0x7D, 0xF8, 0x70, 0x75, 0x0C, 0x8B, 0x45,
        0xFC, 0x50, 0x8B, 0x4D, 0x08, 0x8B, 0x51, 0x14, 0xFF, 0xD2, 0x8B, 0xE5, 0x5D, 0xC3, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
       
    //获取Shell代码的长度
    ShellCodeSize = sizeof(ShellCode);
    //申请等大的缓冲空间
    lpShellCode = new BYTE[ShellCodeSize];
    if (lpShellCode == NULL)
    {
        ::MessageBox(NULL, "Error:GetShellCode New False", NULL, MB_OK);
        return 0;
    }
    //拷贝shellcode到新缓冲区
    memcpy(lpShellCode, ShellCode, ShellCodeSize);

    return 1;
}

//构造压缩数据文件中对齐后需要的空间
BOOL CPacker::MakeCompressData()
{
    //计算压缩后的数据对齐后需要多大的空间
    AlignCompressDataBuffSize = CalcAlign(CompressDataBuffSize, SrcNtHead->OptionalHeader.FileAlignment);
    //申请一块新空间
    AlignCompressDataBuff = new BYTE[AlignCompressDataBuffSize];
    if (AlignCompressDataBuff == NULL)
    {
        return 0;
    }
    //将数据拷贝到对齐后的空间当中
    memcpy(AlignCompressDataBuff, CompressDataBuff, CompressDataBuffSize);

    return 1;
}

//构造shellcode文件中对齐后需要的空间
BOOL CPacker::MakeShellCodeSectionData()
{
    //计算ShellCode对齐后需要多大的空间
    AlignShellCodeSize = CalcAlign(ShellCodeSize, SrcNtHead->OptionalHeader.FileAlignment);
    //申请一块新空间
    AlignlpShellCode = new BYTE[AlignShellCodeSize];
    if (AlignlpShellCode == NULL)
    {
        return 0;
    }
    //将数据拷贝到对齐后的空间当中
    memcpy(AlignlpShellCode, lpShellCode, AlignShellCodeSize);

    return 1;
}

BOOL CPacker::MakeSectionTable()
{
    //一个空节，一个shell节，一个压缩后的数据节，共3个
    NewPeSectionTable = new IMAGE_SECTION_HEADER[3];
    if (NewPeSectionTable == NULL)
    {
        return 0;
    }

    //空节加载到内存展开后的大小
    NewPeSectionTable[SPACE_SECTION].Misc.VirtualSize = SrcNtHead->OptionalHeader.SizeOfImage;
    //空节展开后的地址
    NewPeSectionTable[SPACE_SECTION].VirtualAddress = SrcSecHead[0].VirtualAddress;
    //空节在文件中的大小和位置
    NewPeSectionTable[SPACE_SECTION].SizeOfRawData = 0;
    NewPeSectionTable[SPACE_SECTION].PointerToRawData = 0;
    //空节的属性
    NewPeSectionTable[SPACE_SECTION].Characteristics = IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_EXECUTE;
    //空节名称
    strcpy((char *)NewPeSectionTable[SPACE_SECTION].Name, "Space");

    //ShellCode加载到内存展开后的大小
    NewPeSectionTable[CODE_SECTION].Misc.VirtualSize = CalcAlign(ShellCodeSize, SrcNtHead->OptionalHeader.SectionAlignment);
    //ShellCode加载到内存的位置应该位上一个节区的位置加上大小
    NewPeSectionTable[CODE_SECTION].VirtualAddress = NewPeSectionTable[SPACE_SECTION].VirtualAddress 
                                                        + NewPeSectionTable[SPACE_SECTION].Misc.VirtualSize;
    //ShellCode在文件中的大小和位置，ShellCode是第一个节区，因此在PE头的后面
    NewPeSectionTable[CODE_SECTION].SizeOfRawData = AlignShellCodeSize;
    NewPeSectionTable[CODE_SECTION].PointerToRawData = SrcNtHead->OptionalHeader.SizeOfHeaders;
    //属性为可读可执行
    NewPeSectionTable[CODE_SECTION].Characteristics = IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_EXECUTE;
    strcpy((char *)NewPeSectionTable[CODE_SECTION].Name, "ShelCod");

    //压缩后的数据加载到内存展开后的大小
    NewPeSectionTable[DATA_SECTION].Misc.VirtualSize = CalcAlign(CompressDataBuffSize, SrcNtHead->OptionalHeader.SectionAlignment);
    //压缩后的数据加载到内存的位置应该位上一个节区的位置加上大小
    NewPeSectionTable[DATA_SECTION].VirtualAddress = NewPeSectionTable[CODE_SECTION].VirtualAddress 
                                                        + NewPeSectionTable[CODE_SECTION].Misc.VirtualSize;
    //压缩后的数据载文件中的大小，和在文件 中的位置，位置为shellcode节区后面
    NewPeSectionTable[DATA_SECTION].SizeOfRawData = AlignCompressDataBuffSize;
    NewPeSectionTable[DATA_SECTION].PointerToRawData = NewPeSectionTable[CODE_SECTION].PointerToRawData + NewPeSectionTable[CODE_SECTION].SizeOfRawData;
    NewPeSectionTable[DATA_SECTION].Characteristics = IMAGE_SCN_MEM_READ;
    //在新PE中记录一下压缩后的数据大小和压缩前的数据大小用以shellcode还原PE使用
    NewPeSectionTable[DATA_SECTION].PointerToRelocations = CompressDataBuffSize;
    NewPeSectionTable[DATA_SECTION].PointerToLinenumbers = GetFileSize(hSrcPeFile, NULL);
    strcpy((char *)NewPeSectionTable[DATA_SECTION].Name, "Data");

    return 1;
}

BOOL CPacker::MakePeHead()
{
    //新PE头使用原PE头的大小
    NewPeHeadSize = SrcNtHead->OptionalHeader.SizeOfHeaders;
    NewPeHead = new BYTE[NewPeHeadSize];
    if (NewPeHead == NULL)
    {
        return 0;
    }

    //将原PE头拷贝到新PE头中
    memcpy(NewPeHead, SrcDosHead, NewPeHeadSize);

    //修改PE头的某些选项
    IMAGE_DOS_HEADER *TempDosHead = (PIMAGE_DOS_HEADER)NewPeHead;
    IMAGE_NT_HEADERS *TempNtHead = (PIMAGE_NT_HEADERS)(NewPeHead + TempDosHead->e_lfanew);
    IMAGE_SECTION_HEADER *TempSectionHead = (PIMAGE_SECTION_HEADER)(TempNtHead->FileHeader.SizeOfOptionalHeader + (LPBYTE)&TempNtHead->OptionalHeader);

    //修改节区数量
    TempNtHead->FileHeader.NumberOfSections = 3;
    //修改入口点指向shellcode
    TempNtHead->OptionalHeader.AddressOfEntryPoint = NewPeSectionTable[CODE_SECTION].VirtualAddress;

    //修改新PE加载到内存后的总大小,总大小为最后一个节区的rva地址加上大小
    TempNtHead->OptionalHeader.SizeOfImage = NewPeSectionTable[DATA_SECTION].VirtualAddress + NewPeSectionTable[DATA_SECTION].Misc.VirtualSize;

    //拷贝节表
    memcpy(TempSectionHead, NewPeSectionTable, sizeof(IMAGE_SECTION_HEADER) * 3);
    return 1;
}

BOOL CPacker::WriteNewPeFile(char * DstPePath)
{
    //创建文件
    HANDLE hFile = ::CreateFile(DstPePath, GENERIC_ALL, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == NULL)
    {
        return 0;
    }
    ULONG WriteByte = 0;
    ::WriteFile(hFile, NewPeHead, NewPeHeadSize, &WriteByte, NULL);
    ::WriteFile(hFile, AlignlpShellCode, AlignShellCodeSize, &WriteByte, NULL);
    ::WriteFile(hFile, AlignCompressDataBuff, AlignCompressDataBuffSize, &WriteByte, NULL);

    CloseHandle(hFile);
    return 1;
}

void CPacker::ErrorMessage()
{
    LPVOID lpMsgBuf;
    ::FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        NULL,
        GetLastError(),
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
        (LPTSTR)&lpMsgBuf,
        0,
        NULL
        );
    // Process any inserts in lpMsgBuf.
    // ...
    // Display the string.
    ::MessageBox(NULL, (LPCTSTR)lpMsgBuf, "Error", MB_OK | MB_ICONINFORMATION);
    // Free the buffer.
    ::LocalFree(lpMsgBuf);
}

//计算对齐值
ULONG CPacker::CalcAlign(ULONG NeedAlignValue, ULONG AlignValue)
{
    if (NeedAlignValue % AlignValue == 0)
    {
        //不需要对齐
        return NeedAlignValue;
    }
    else
    {
        return ((NeedAlignValue / AlignValue) + 1) * AlignValue;
    }
    return 0;
}
